// Send GUI call to APL
// Response is always 204-No Content
//          and does not need to be handled.

function getTextWidth(text, font) {
  // re-use canvas object for better performance
  const canvas = getTextWidth.canvas || (getTextWidth.canvas = document.createElement("canvas"));
  const context = canvas.getContext("2d");
  context.font = font;
  const metrics = context.measureText(text);
  return metrics.width;
}


function sendAPLRequest(e){
      const ce=[e.currentTarget.className,e.target.tagName,e.type,e.key].join();
      const pd=PreventDefaultList.includes(ce);
      // alert (ce)
      if (pd){
                e.preventDefault();
       }     
      const c = document.getElementsByTagName("*");
      const a = Array.from(c);
      const j = a.indexOf(e.target);
      const k = a.indexOf(e.currentTarget);
      const u = 'http://dyalog_root/gui';
      const r = e.target.getBoundingClientRect();
      const s = window.getComputedStyle(e.target);
      const t = e.target.value.slice(0, e.target.selectionStart); 
      // const w = getTextWidth(t, s['font']);
      const cw = getTextWidth("9", s['font']);
      const b = {
                Event: e.type,
                Value: e.target.value,
                Name: e.target.name,
                TargetTag: e.target.tagName,
                CurrentTargetTag: e.currentTarget.tagName, 
                TargetIndex: j,
                CurrentTargetIndex: k,
                InnerHTML: e.target.innerHTML,
                Key: e.key, 
                CtrlKey: e.ctrlKey,
                AltKey: e.altKey,
                ShiftKey: e.shiftKey,
                SelectionStart: e.target.selectionStart,
                FontSize: s['font-size'],
                FontFamily: s['font-family'],
                Font: s['font'],
                Padding: s['padding'],
                CharacterWidth: cw,
                BoundingClientRect: [r.top,r.left,r.bottom,r.right]
      };
      const i = {
           method: 'POST',
           body: JSON.stringify(b) 
      };
      const q = new Request(u,i);
      fetch(q)
}
